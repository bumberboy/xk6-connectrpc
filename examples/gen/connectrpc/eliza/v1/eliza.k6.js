// Code generated by protoc-gen-k6-connectrpc. DO NOT EDIT.
//
// Source: connectrpc/eliza/v1/eliza.proto
// Language: JavaScript

import connectrpc from 'k6/x/connectrpc';
import { 
  StreamWrapper, 
  ServerStreamWrapper, 
  ClientStreamWrapper, 
  BidiStreamWrapper 
} from '../../../streaming-wrappers.js';


// Constants for ElizaService service
export const ElizaServiceConstants = {
  SERVICE_NAME: "connectrpc.eliza.v1.ElizaService",
  METHODS: {
    SAY: "/connectrpc.eliza.v1.ElizaService/Say",
    CONVERSE: "/connectrpc.eliza.v1.ElizaService/Converse",
    INTRODUCE: "/connectrpc.eliza.v1.ElizaService/Introduce",
  },
  METADATA: {
    SAY: {
      type: "unary",
    },
    CONVERSE: {
      type: "bidi_stream",
    },
    INTRODUCE: {
      type: "server_stream",
    },
  }
};

// Validation helpers for ElizaService service
const ElizaServiceValidators = {
  Say: {
    request: (req) => {
      return req;
    }
  },
  Converse: {
    request: (req) => {
      return req;
    }
  },
  Introduce: {
    request: (req) => {
      return req;
    }
  },
};




// ElizaService client class
export class ElizaServiceClient {
  constructor(connectrpcClient, baseURL = '') {
    this.client = connectrpcClient;
    this.baseURL = baseURL.replace(/\/$/, '');
  }

  /**
   * Method Say
   * @param {Object} request - The request object
   * @param {Object} options - Call options (timeout, headers, etc.)
   * @returns {Promise<Object>} The response object
   */
  say(request, options = {}) {
    ElizaServiceValidators.Say.request(request);
    return this.client.invoke(
      ElizaServiceConstants.METHODS.SAY,
      request,
      {
        timeout: '30s',
        ...options
      }
    );
  }

  /**
   * Method Converse
   * Bidirectional streaming method - returns stream wrapper
   * @param {Object} options - Call options
   * @returns {BidiStreamWrapper} Stream wrapper for bidirectional communication
   */
  converseStream(options = {}) {
    const stream = new connectrpc.Stream(
      this.client,
      ElizaServiceConstants.METHODS.CONVERSE
    );
    return new BidiStreamWrapper(stream, options);
  }

  /**
   * Method Introduce
   * Server streaming method - returns stream wrapper with multiple consumption patterns
   * @param {Object} request - The request object
   * @param {Object} options - Call options
   * @returns {ServerStreamWrapper} Stream wrapper with .on(), .forEach(), .collect() methods
   */
  introduce(request, options = {}) {
    ElizaServiceValidators.Introduce.request(request);
    const stream = new connectrpc.Stream(
      this.client, 
      ElizaServiceConstants.METHODS.INTRODUCE
    );
    const wrapper = new ServerStreamWrapper(stream, options);
    stream.write(request);
    stream.end();
    return wrapper;
  }
}


// Auto-load embedded proto definitions
try {
  connectrpc.loadEmbeddedProtoset('CuoZCh9jb25uZWN0cnBjL2VsaXphL3YxL2VsaXphLnByb3RvEhNjb25uZWN0cnBjLmVsaXphLnYxIigKClNheVJlcXVlc3QSGgoIc2VudGVuY2UYASABKAlSCHNlbnRlbmNlIikKC1NheVJlc3BvbnNlEhoKCHNlbnRlbmNlGAEgASgJUghzZW50ZW5jZSItCg9Db252ZXJzZVJlcXVlc3QSGgoIc2VudGVuY2UYASABKAlSCHNlbnRlbmNlIi4KEENvbnZlcnNlUmVzcG9uc2USGgoIc2VudGVuY2UYASABKAlSCHNlbnRlbmNlIiYKEEludHJvZHVjZVJlcXVlc3QSEgoEbmFtZRgBIAEoCVIEbmFtZSIvChFJbnRyb2R1Y2VSZXNwb25zZRIaCghzZW50ZW5jZRgBIAEoCVIIc2VudGVuY2UynAIKDEVsaXphU2VydmljZRJNCgNTYXkSHy5jb25uZWN0cnBjLmVsaXphLnYxLlNheVJlcXVlc3QaIC5jb25uZWN0cnBjLmVsaXphLnYxLlNheVJlc3BvbnNlIgOQAgESXQoIQ29udmVyc2USJC5jb25uZWN0cnBjLmVsaXphLnYxLkNvbnZlcnNlUmVxdWVzdBolLmNvbm5lY3RycGMuZWxpemEudjEuQ29udmVyc2VSZXNwb25zZSIAKAEwARJeCglJbnRyb2R1Y2USJS5jb25uZWN0cnBjLmVsaXphLnYxLkludHJvZHVjZVJlcXVlc3QaJi5jb25uZWN0cnBjLmVsaXphLnYxLkludHJvZHVjZVJlc3BvbnNlIgAwAUKTAQoXY29tLmNvbm5lY3RycGMuZWxpemEudjFCCkVsaXphUHJvdG9QAaICA0NFWKoCE0Nvbm5lY3RycGMuRWxpemEuVjHKAhNDb25uZWN0cnBjXEVsaXphXFYx4gIfQ29ubmVjdHJwY1xFbGl6YVxWMVxHUEJNZXRhZGF0YeoCFUNvbm5lY3RycGM6OkVsaXphOjpWMUrnEwoGEgQOAEQBCssECgEMEgMOABIywAQgQ29weXJpZ2h0IDIwMjItMjAyMyBUaGUgQ29ubmVjdCBBdXRob3JzCgogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKCiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAoKIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoKCAoBAhIDEAAcCv8CCgIGABIEGAAkARryAiBFbGl6YVNlcnZpY2UgcHJvdmlkZXMgYSB3YXkgdG8gdGFsayB0byBFbGl6YSwgYSBwb3J0IG9mIHRoZSBET0NUT1Igc2NyaXB0CiBmb3IgSm9zZXBoIFdlaXplbmJhdW0ncyBvcmlnaW5hbCBFTElaQSBwcm9ncmFtLiBDcmVhdGVkIGluIHRoZSBtaWQtMTk2MHMgYXQKIHRoZSBNSVQgQXJ0aWZpY2lhbCBJbnRlbGxpZ2VuY2UgTGFib3JhdG9yeSwgRUxJWkEgZGVtb25zdHJhdGVzIHRoZQogc3VwZXJmaWNpYWxpdHkgb2YgaHVtYW4tY29tcHV0ZXIgY29tbXVuaWNhdGlvbi4gRE9DVE9SIHNpbXVsYXRlcyBhCiBwc3ljaG90aGVyYXBpc3QsIGFuZCBpcyBjb21tb25seSBmb3VuZCBhcyBhbiBFYXN0ZXIgZWdnIGluIGVtYWNzCiBkaXN0cmlidXRpb25zLgoKCgoDBgABEgMYCBQKWAoEBgACABIEGgIcAxpKIFNheSBpcyBhIHVu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');
} catch (err) {
  console.warn('Failed to auto-load embedded proto definitions:', err.message);
  console.warn('You may need to call connectrpc.loadProtos() or connectrpc.loadProtoset() manually');
}
 