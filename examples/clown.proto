syntax = "proto3";

// package-level comment: this clown package is for testing only
package clown.v1;


message JokeRequest {
  string audience_type = 1; // e.g., "kids", "adults", "programmers", "bankers"
}

message JokeResponse {
  string setup = 1;
  string punchline = 2;
  int32 laugh_rating = 3; // On a scale of 1-10, how funny was that?
}

message MakeBalloonsRequest {
  int32 count = 1;
  string color = 2;
  string shape = 3;
}

message MakeBalloonsResponse {
  repeated string balloon_shapes = 1;
  int32 total_made = 2;
}

message LaughRequest {
  string type = 1; // happy, evil, nervous, etc.
}

message LaughResponse {
  string laughter = 1;
}

// ClownGreetRequest is used to send a name to the ClownGreetStream endpoint.
// The server will respond with a personalized funny greeting for the provided name.
message ClownGreetRequest {
  string name = 1; // Name to greet. If empty, a default name will be used.
}

// ClownGreetResponse contains a funny greeting generated by the server.
message ClownGreetResponse {
  string greeting = 1; // The personalized funny greeting
}

// StreamJokeRequest is used to request a stream of jokes from the server.
// The server will stream jokes at a rate of one joke per second.
message StreamJokeRequest {
  string audience_type = 1; // e.g., "kids", "adults", "programmers", "bankers"
  int32 joke_count = 2; // Number of jokes to stream. If not provided or <= 0, the stream will continue indefinitely until the client disconnects.
}

/* service-level comment

testing mermaid diagram
```mermaid
erDiagram
          CUSTOMER }|..|{ DELIVERY-ADDRESS : has
          CUSTOMER ||--o{ ORDER : places
          CUSTOMER ||--o{ INVOICE : "liable for"
          DELIVERY-ADDRESS ||--o{ ORDER : receives
          INVOICE ||--|{ ORDER : covers
          ORDER ||--|{ ORDER-ITEM : includes
          PRODUCT-CATEGORY ||--|{ PRODUCT : contains
          PRODUCT ||--o{ ORDER-ITEM : "ordered in"
```

```mermaid
sequenceDiagram
    Alice->>John: Hello John, how are you?
    John-->>Alice: Great!
    Alice-)John: See you later!
```
 */
service ClownService {

  // rpc-level comment
  rpc TellJoke(JokeRequest) returns (JokeResponse) {}
  rpc MakeBalloons(MakeBalloonsRequest) returns (MakeBalloonsResponse) {}
  rpc Laugh(LaughRequest) returns (LaughResponse) {}

  // ClownGreetStream is a bidirectional streaming RPC that allows clients to send names
  // and receive personalized funny greetings in response.
  // 
  // The client can send multiple names over time, and the server will respond to each
  // with a unique funny greeting. The stream remains open until the client closes it.
  // 
  // Example usage:
  // 1. Client opens a stream and sends a name "Alice"
  // 2. Server responds with a greeting like "Hey there Alice! Did you hear about the circus?"
  // 3. Client can send another name "Bob" on the same stream
  // 4. Server responds with a different greeting for Bob
  // 5. This continues until the client closes the stream
  rpc ClownGreetStream(stream ClownGreetRequest) returns (stream ClownGreetResponse) {}

  // StreamJoke is a server-side streaming RPC that sends a continuous stream of jokes
  // to the client at a rate of one joke per second.
  // 
  // The client can specify an audience type to receive jokes tailored to that audience.
  // If jokeCount is provided and > 0, the server will send exactly that many jokes and then end the stream.
  // If jokeCount is not provided or <= 0, the server will stream jokes indefinitely until the client disconnects.
  // 
  // Example usage:
  // 1. Client requests jokes for audience "programmers" with no joke count
  // 2. Server streams programming jokes indefinitely at one per second
  // 3. Client can disconnect at any time to stop receiving jokes
  rpc StreamJoke(StreamJokeRequest) returns (stream JokeResponse) {}
}